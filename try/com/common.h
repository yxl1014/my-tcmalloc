//
// Created by yxl on 22-11-14.
//

#include <stddef.h>

#ifndef MY_TCMALLOC_CLASSSIZE_H
#define MY_TCMALLOC_CLASSSIZE_H

namespace MyTCMalloc {
    struct ClassSizeInfo {
        //该对象的实际内存大小
        size_t size;
        //该对象中包含的page的个数
        size_t num;
        //该对象从上一层 1:(middle-end)中的Central-Free-List获取的class-size大小的内存的个数
        //在这个class-size链表下节点若不使用，则讲他放到thread-cache中
        //若thread-cache满了则通过Scavenge()将对象返回给1
        size_t num_to_move;
    };


    //TODO 用于计算页面大小的移位量
    constexpr size_t kPageShift = 13;

    //TODO 一个FreeList的class-size的数量
    constexpr size_t kNumBaseClasses = 86;

    //TODO 是否拥有扩展类
    constexpr bool kHasExpandedClasses = true;

    //TODO font-end和middle-end分配内存最大的大小的最大大小                256KB
    constexpr size_t kMaxSize = 256 * 1024;

    //TODO 线程cache区最小容量                                          512KB
    constexpr size_t kMinThreadCacheSize = kMaxSize * 2;

    //TODO 线程cache区最大容量                                          4MB
    constexpr size_t kMaxThreadCacheSize = 4 << 20;

    //TODO cpu最大容量                                                 1.5MB
    constexpr size_t kMaxCpuCacheSize = 1.5 * 1024 * 1024;

    //TODO 所有线程整合默认cache容量
    constexpr size_t kDefaultOverallThreadCacheSize = 8u * kMaxThreadCacheSize;

    //TODO 当线程Scavenge()时从middle-end获取的最小cache大小              64KB
    constexpr size_t kStealAmount = 1 << 16;

    //TODO
    constexpr size_t kDefaultProfileSamplingRate = 1 << 21;

    //TODO 最小页大小
    constexpr size_t kMinPages = 8;

    static constexpr ClassSizeInfo kSizeClassesList[85] = {
            // <bytes>,       <pages>,        <batch size>   <fixed>
            {0,      0,  0},  // +Inf%
            {8,      1,  32},  // 0.59%
            {16,     1,  32},  // 0.59%
            {32,     1,  32},  // 0.59%
            {64,     1,  32},  // 0.59%
            {80,     1,  32},  // 0.98%
            {96,     1,  32},  // 0.98%
            {112,    1,  32},  // 0.78%
            {128,    1,  32},  // 0.59%
            {144,    1,  32},  // 2.18%
            {160,    1,  32},  // 0.98%
            {176,    1,  32},  // 1.78%
            {192,    1,  32},  // 2.18%
            {208,    1,  32},  // 1.58%
            {224,    1,  32},  // 2.18%
            {240,    1,  32},  // 0.98%
            {256,    1,  32},  // 0.59%
            {272,    1,  32},  // 0.98%
            {288,    1,  32},  // 2.18%
            {304,    1,  32},  // 4.25%
            {320,    1,  32},  // 3.00%
            {336,    1,  32},  // 2.18%
            {352,    1,  32},  // 1.78%
            {368,    1,  32},  // 1.78%
            {384,    1,  32},  // 2.18%
            {400,    1,  32},  // 3.00%
            {416,    1,  32},  // 4.25%
            {448,    1,  32},  // 2.18%
            {480,    1,  32},  // 0.98%
            {512,    1,  32},  // 0.59%
            {576,    1,  32},  // 2.18%
            {640,    1,  32},  // 7.29%
            {704,    1,  32},  // 6.40%
            {768,    1,  32},  // 7.29%
            {896,    1,  32},  // 2.18%
            {1024,   1,  32},  // 0.59%
            {1152,   2,  32},  // 1.88%
            {1280,   2,  32},  // 6.98%
            {1408,   2,  32},  // 6.10%
            {1536,   2,  32},  // 6.98%
            {1792,   2,  32},  // 1.88%
            {2048,   2,  32},  // 0.29%
            {2304,   2,  28},  // 1.88%
            {2688,   2,  24},  // 1.88%
            {2816,   3,  23},  // 9.30%
            {3200,   2,  20},  // 2.70%
            {3456,   3,  18},  // 1.79%
            {3584,   4,  18},  // 1.74%
            {4096,   1,  16},  // 0.59%
            {4736,   3,  13},  // 3.99%
            {5376,   2,  12},  // 1.88%
            {6144,   3,  10},  // 0.20%
            {6528,   4,  10},  // 0.54%
            {7168,   7,  9},  // 0.08%
            {8192,   1,  8},  // 0.59%
            {9472,   5,  6},  // 8.23%
            {10240,  4,  6},  // 6.82%
            {12288,  3,  5},  // 0.20%
            {13568,  5,  4},  // 0.75%
            {14336,  7,  4},  // 0.08%
            {16384,  2,  4},  // 0.29%
            {20480,  5,  3},  // 0.12%
            {24576,  3,  2},  // 0.20%
            {28672,  7,  2},  // 0.08%
            {32768,  4,  2},  // 0.15%
            {40960,  5,  2},  // 0.12%
            {49152,  6,  2},  // 0.10%
            {57344,  7,  2},  // 0.08%
            {65536,  8,  2},  // 0.07%
            {73728,  9,  2},  // 0.07%
            {81920,  10, 2},  // 0.06%
            {90112,  11, 2},  // 0.05%
            {98304,  12, 2},  // 0.05%
            {106496, 13, 2},  // 0.05%
            {114688, 14, 2},  // 0.04%
            {131072, 16, 2},  // 0.04%
            {139264, 17, 2},  // 0.03%
            {147456, 18, 2},  // 0.03%
            {163840, 20, 2},  // 0.03%
            {172032, 21, 2},  // 0.03%
            {188416, 23, 2},  // 0.03%
            {204800, 25, 2},  // 0.02%
            {221184, 27, 2},  // 0.02%
            {237568, 29, 2},  // 0.02%
            {262144, 32, 2},  // 0.02%
    };
}


#endif //MY_TCMALLOC_CLASSSIZE_H
